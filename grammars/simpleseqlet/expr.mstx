main(p) :- p match
  { Expr(e):[] -> {ty, s}
      new s,
      expr(s, e, ty)
  }.

expr(s, e, ty) :- e match
  { 
    Not(e1) ->
      expr (s, e1, BOOL ()),
      ty == BOOL ()
  | And (e1, e2) ->
      expr (s, e1, BOOL ()),
      expr (s, e2, BOOL ())
  | Or (e1, e2) ->
      expr (s, e1, BOOL ()),
      expr (s, e2, BOOL ())

  | Lt (e1, e2) ->
      expr (s, e1, INT ()),
      expr (s, e2, INT ()),
      ty == BOOL()
  | Gt (e1, e2) ->
      expr (s, e1, INT ()),
      expr (s, e2, INT ()),
      ty == BOOL ()
  | Leq (e1, e2) ->
      expr (s, e1, INT ()),
      expr (s, e2, INT ()),
      ty == BOOL ()
  | Geq (e1, e2) ->
      expr (s, e1, INT ()),
      expr (s, e2, INT ()),
      ty == BOOL()

  | Eq (e1, e2) ->
      expr(s, e1, INT()),
      expr(s, e2, INT()),
      ty == BOOL ()
  | Eq (e1, e2) ->
      expr(s, e1, BOOL()),
      expr(s, e2, BOOL()),
      ty == BOOL ()
  | Neq (e1, e2) -> {ty'}
      expr(s, e1, ty'),
      expr(s, e2, ty'),
      ty == BOOL ()

  | Mul(e1, e2) ->
      expr (s, e1, INT ()),
      expr (s, e2, INT ()),
      ty == INT()
  | Div(e1, e2) ->
      expr (s, e1, INT ()),
      expr (s, e2, INT ()),
      ty == INT()
  | Add(e1, e2) ->
      expr (s, e1, INT ()),
      expr (s, e2, INT ()),
      ty == INT()
  | Sub(e1, e2) ->
      expr (s, e1, INT ()),
      expr (s, e2, INT ()),
      ty == INT ()
  | Neg (e1) ->
      expr (s, e1, INT ()),
      ty == INT ()


  | Let (bs, e) -> {s_let}
      new s_let,
      seq-binds(s, bs, s_let),
      expr(s_let, e, ty)

  | LetRec (bs, e) -> {s_let}
      new s_let,
      s_let -[ `LEX ]-> s,
      rec-binds(s_let, bs),
      expr(s_let, e, ty)

  | LetPar (bs, e) -> {s_let}
      new s_let,
      s_let -[ `LEX ]-> s,
      par-binds(s, bs, s_let),
      expr(s_let, e, ty)


  | Ref (x) -> {p, vars, xvars, xvars'}
      query s `LEX* `VAR as vars,
      filter vars ((x', _) where x' == x) xvars,
      min-refs(xvars, xvars'),
      only(xvars', p),
      datum(p, (x, ty))
    
  | Int(_) ->
      ty == INT()
  | True() ->
      ty == BOOL()
  | False() ->
      ty == BOOL()
  }.



seq-binds(s, bs, s_def) :- bs match
  { []   ->
      s_def -[ `LEX ]-> s
  | b:[] ->
      s_def -[ `LEX ]-> s,
      seq-bind(s, b, s_def)
  | b:bs -> {s_def'}
      new s_def',
      s_def' -[ `LEX ]-> s,
      seq-bind(s, b, s_def'),
      seq-binds(s_def', bs, s_def)
  }.

seq-bind(s, b, s_def) :- b match
  { DefBind(x, e) -> {s_var, ty}
      new s_var -> (x, ty),
      s_def -[ `VAR ]-> s_var,
      expr(s, e, ty)
  }.



rec-binds(s, bs) :- bs match
  { []   -> true
  | b:bs -> rec-bind(s, b), rec-binds(s, bs)
  }.

rec-bind(s, b) :- b match
  { DefBind(x, e) -> {s_var, ty}
      new s_var -> (x, ty),
      s -[ `VAR ]-> s_var,
      expr(s, e, ty)
  }.



par-binds(s, bs, s_def) :- bs match
  { []   -> true
  | b:bs -> par-bind(s, b, s_def), par-binds(s, bs, s_def)
  }.

par-bind(s, b, s_def) :- b match
  { DefBind(x, e) -> {s_var, ty}
      new s_var -> (x, ty),
      s_def -[ `VAR ]-> s_var,
      expr(s, e, ty)
  }.



// label ordering
min-refs(z, z') :-
  min z lexico( `MOD < `LEX, `MOD < `IMP, `MOD < `EXT,
                `REC < `LEX, `REC < `IMP, `REC < `EXT,
                `VAR < `LEX, `VAR < `IMP, `VAR < `EXT,
                `IMP < `LEX, `EXT < `LEX
              ) z'.

// s is the target scope of a path p
tgt(p,s) :- p match
  { End(x)       -> s == x
  | Edge(x,l,xs) -> tgt(xs,s)
  }.

// s is the source scope of a path p
src(p,s) :- p match
  { End(x)       -> s == x
  | Edge(x,l,xs) -> s == x
  }.

// d is the datum of the target of p
datum(p,d) :- {s} tgt(p, s), s -> d.

// empty
empty(set) :- every set (x -> false).